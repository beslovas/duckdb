name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DUCKDB_VERSION: v1.3.2

jobs:
  build-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ env.DUCKDB_VERSION }}

    - name: Build and push multi-arch Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DUCKDB_VERSION }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  helm-chart:
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Build and test Helm chart
      run: |
        cd helm/duckdb
        
        helm lint .
        
        helm template . --dry-run
        
        helm template . --dry-run --set persistence.enabled=false
        helm template . --dry-run --set duckdb.ui=false
        
        helm package .
        
        helm repo index . --url https://github.com/${{ github.repository }}/releases/latest/download

    - name: Upload Helm chart artifacts
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart
        path: helm/duckdb/*.tgz
        retention-days: 30

  publish-helm:
    runs-on: ubuntu-latest
    needs: [helm-chart, security-scan]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      GH_TOKEN: ${{ github.token }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Helm chart artifacts
      uses: actions/download-artifact@v4
      with:
        name: helm-chart
        path: helm/duckdb/

    - name: Set up Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    - name: Create GitHub Release
      run: |
        cd helm/duckdb
        
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ github.ref_name }}" \
          --notes "DuckDB Helm chart release ${{ github.ref_name }}" \
          *.tgz
        
        echo "Helm chart published to GitHub Releases successfully"
