1. Get the application URL by running these commands:
{{- if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "duckdb.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. DuckDB UI is accessible on port {{ .Values.service.port }}

3. To connect to DuckDB CLI directly:
   kubectl exec -it deployment/{{ include "duckdb.fullname" . }} -- duckdb

4. To view the generated duckdbrc configuration:
   kubectl get configmap {{ include "duckdb.fullname" . }}-config -o yaml

5. To check persistent storage:
   kubectl get pvc {{ include "duckdb.fullname" . }}

6. To view logs:
   kubectl logs deployment/{{ include "duckdb.fullname" . }}

7. Health check endpoints:
   - Liveness probe: /version on port 4213 (checks if DuckDB is running)
   - Readiness probe: /version on port 4213 (checks if UI is ready to serve)
   - Startup probe: /version on port 4213 (checks if system is initialized)

8. Available extensions:
{{- if .Values.duckdb.extensions }}
{{- range .Values.duckdb.extensions }}
   - {{ . }}
{{- end }}
{{- else }}
   - No extensions enabled
{{- end }}

{{- if .Values.auth.enabled }}
9. Authentication is enabled:
   - Username: {{ .Values.auth.username }}
   - Password: {{ .Values.auth.password }}
{{- else }}
9. Authentication is disabled (no login required)
{{- end }}
